import streamlit as st
import pandas as pd
from descriptors import calculate_descriptors   # your QSAR descriptor function
from src.ai_agent_new import query_ai_agent     # your AI agent

st.title("üß™ QSAR Descriptor Calculator with AI Agent")
st.write("Enter a **SMILES** string or upload a CSV file to calculate QSAR descriptors.")

# --- Input SMILES field ---
smiles = st.text_input("Enter a single SMILES string:", "")

# --- Session state ---
if "qsar_result" not in st.session_state:
    st.session_state.qsar_result = None

# --- Button 1: Calculate descriptors for SMILES ---
if st.button("Calculate Descriptors"):
    if smiles.strip():
        result = calculate_descriptors(smiles)
        if result:
            st.session_state.qsar_result = result
            st.subheader("Results:")
            for key, value in result.items():
                st.write(f"**{key}:** {value}")
        else:
            st.error("‚ùå Invalid SMILES string.")
    else:
        st.warning("‚ö†Ô∏è Please enter a SMILES string.")

# --- Upload CSV for batch calculation ---
uploaded_file = st.file_uploader("Or upload a CSV file with a column named 'SMILES'", type="csv")
if uploaded_file:
    df = pd.read_csv(uploaded_file)
    if 'SMILES' not in df.columns:
        st.error("CSV must have a column named 'SMILES'")
    else:
        results = []
        for smi in df['SMILES']:
            desc = calculate_descriptors(smi)
            if desc:
                desc['SMILES'] = smi
                results.append(desc)
        result_df = pd.DataFrame(results)
        st.write(result_df)

        # Download option
        csv = result_df.to_csv(index=False)
        st.download_button("üì• Download results as CSV", csv, "qsar_results.csv")

# --- AI Agent Analysis (only if descriptors calculated) ---
if st.session_state.qsar_result is not None:
    st.divider()
    st.subheader("ü§ñ AI Agent Analysis")

    if st.button("üîç Analyze with AI"):
        with st.spinner("Analyzing descriptors with AI..."):
            result = st.session_state.qsar_result
            result_text = "\n".join([f"{k}: {v}" for k, v in result.items()])
            prompt = (
                f"Analyze the following QSAR molecular descriptors and explain what they "
                f"imply about drug-likeness, solubility, and potential activity:\n\n{result_text}\n\n"
                f"Give a short summary with interpretation."
            )
            try:
                ai_response = query_ai_agent(prompt)
                st.success("‚úÖ AI Analysis Complete")
                st.write(ai_response)
            except Exception as e:
                st.error(f"‚ùå Error: {e}")
